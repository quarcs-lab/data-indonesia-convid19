create_sample <- function(df, df_def) {
# Set infinite numerical variables to NA
df[, df_def$var_name[df_def$type == "numeric"]] <-
lapply(df[, df_def$var_name[df_def$type == "numeric"]],
function(x) ifelse(is.finite(x), x, NA))
# Delete numerical variables that only contain NAs
all_na_vars <- sapply(df, function (x) all(is.na(x)))
df_def <- df_def[!all_na_vars,]
df <- df[, df_def$var_name]
# Drop observations that are NA in variables that are not allowed to
df <- df[complete.cases(df[, df_def$var_name[which(df_def$can_be_na == FALSE)]]), ]
df <- droplevels(df)
return(list(df = df, df_def = df_def))
}
load("ExPanD_nb_data.Rdata")
df <- smp
create_sample <- function(df, df_def) {
# Set infinite numerical variables to NA
df[, df_def$var_name[df_def$type == "numeric"]] <-
lapply(df[, df_def$var_name[df_def$type == "numeric"]],
function(x) ifelse(is.finite(x), x, NA))
# Delete numerical variables that only contain NAs
all_na_vars <- sapply(df, function (x) all(is.na(x)))
df_def <- df_def[!all_na_vars,]
df <- df[, df_def$var_name]
# Drop observations that are NA in variables that are not allowed to
df <- df[complete.cases(df[, df_def$var_name[which(df_def$can_be_na == FALSE)]]), ]
df <- droplevels(df)
return(list(df = df, df_def = df_def))
}
load("ExPanD_nb_data.Rdata")
create_sample <- function(df, df_def) {
# Set infinite numerical variables to NA
df[, df_def$var_name[df_def$type == "numeric"]] <-
lapply(df[, df_def$var_name[df_def$type == "numeric"]],
function(x) ifelse(is.finite(x), x, NA))
# Delete numerical variables that only contain NAs
all_na_vars <- sapply(df, function (x) all(is.na(x)))
df_def <- df_def[!all_na_vars,]
df <- df[, df_def$var_name]
# Drop observations that are NA in variables that are not allowed to
df <- df[complete.cases(df[, df_def$var_name[which(df_def$can_be_na == FALSE)]]), ]
df <- droplevels(df)
return(list(df = df, df_def = df_def))
}
load("ExPanD_nb_data.Rdata")
smp_list <- create_sample(nb_df, nb_df_def)
smp <- smp_list$df
smp_def <- smp_list$df_def
df <- smp
df$region <- as.factor(df$region)
df$province <- as.factor(df$province)
p <- ggplot(df, aes(x = region)) +
geom_bar(aes(fill= province), position = "stack") +
labs(x = "region", fill = "province")
p
df <- smp
t <- prepare_descriptive_table(smp)
t$kable_ret  %>%
kable_styling("condensed", full_width = F, position = "center")
var <- as.numeric(smp$gdp_q2_yoy)
hist(var, main="", xlab = "gdp_q2_yoy", col="red", right = FALSE, breaks= 30)
df <- smp
vars <- c("Prov", "ts_id", "case_chg", "province")
vars <- c("cs_id", "ts_id", "case_chg", "province")
df <- df[, vars]
df <- droplevels(df[complete.cases(df), ])
if (nrow(df) <= 10) {
cat("Not enough data to generate table")
} else {
tab <- prepare_ext_obs_table(df, var = "case_chg")
tab$kable_ret %>%
kable_styling()
}
df <- smp
prepare_by_group_bar_graph(df, "province", "rate_chg", mean, TRUE)$plot +
ylab("mean rate_chg")
View(smp)
df <- smp
prepare_by_group_bar_graph(df, "province", "rate_chg", mean, TRUE)$plot +
ylab(" rate_chg")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
library(tidyverse)  # Modern data science workflow
library(sf)         # Simple features for R
library(tmap)       # Thematic Maps
library(tmaptools)  # Thematic Maps Tools
library(RColorBrewer) # ColorBrewer Palettes
library(leaflet)    # Interactive web maps
library(rgdal)      # Bindings for the Geospatial Data Abstraction Library
library(rgeos)      # Interface to Geometry Engine - Open Source
# Change the presentation of decimal numbers to 4 and avoid scientific notation
options(prompt="R> ", digits=4, scipen=999)
map <- read_sf("province border.shp")
library(readxl)
data <- read_excel("explore expandr.xlsx",
sheet = "Sheet1")
View(data)
df <- data %>% select(-c(4:7,9:12))
library(readr)
df_definitions <- read_delim("df_def.csv", ";", escape_double = FALSE,
trim_ws = TRUE)
df_definitions
map <- read_sf("province border.shp")
covid_map <- inner_join(
df,
map,
by = "ID"
)
covid_map
View(covid_map)
ggplot(data, aes(rate_chg, province))
ggplot(data, aes(rate_chg, province)) +
geom_bar
ggplot(data, aes(rate_chg, province)) +
geom_bar()
ggplot(data, aes(rate_chg, province)) +
geom_col()
ggplot(data, aes(rate_chg, province)) +
geom_boxplot()
ggplot(data, aes(reorder(province, -rate_chg, sum), rate_chg)) +
geom_boxplot()
ggplot(data, aes(reorder(province, -rate_chg, sum), rate_chg)) +
geom_col()
ggplot(data, aes(reorder(rate_chg, -province, sum), province)) +
geom_col()
ggplot(data, aes(reorder(rate_chg, -rate_chg, sum), province)) +
geom_col()
ggplot(data, aes(reorder(province, -rate_chg, sum), rate_chg)) +
geom_col()
ggplot(data, aes(reorder(province, -rate_chg, sum), rate_chg)) +
geom_col()+ coord_flip()
ggplot(data, aes(reorder(province, -rate_chg, sum), rate_chg)) +
geom_col() + coord_flip()
case_rate <- ggplot(data, aes(reorder(province, -rate_chg, sum), rate_chg)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "Consumer Price Index (log)",
x = "",
y = "", color="") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
case_rate
#ggsave("allclub transpath.pdf", width = 9, height = 5)
case_rate <- ggplot(data, aes(reorder(province, -rate_chg, sum), rate_chg)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Change in number of cases from Marh to June 2020 (in 100.000 population",
y = "Province", color="") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
case_rate
#ggsave("allclub transpath.pdf", width = 9, height = 5)
case_rate <- ggplot(data, aes(reorder(province, -rate_chg, sum), rate_chg)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Change in number of cases from Marh to June 2020 (in 100.000 population", color="") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
case_rate
#ggsave("allclub transpath.pdf", width = 9, height = 5)
case_rate <- ggplot(data, aes(reorder(province, -rate_chg, sum), rate_chg)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Change in number of cases (in 100.000 population", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
case_rate
#ggsave("allclub transpath.pdf", width = 9, height = 5)
case_rate <- ggplot(data, aes(reorder(province, -rate_chg, sum), rate_chg)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Change in number of cases (in 100.000 population", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
case_rate
ggsave("case_change.png", width = 9, height = 5)
case_rate <- ggplot(data, aes(reorder(province, -rate_chg, sum), rate_chg)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Change in number of cases (in 100.000 population)", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
case_rate
ggsave("case_change.png", width = 9, height = 5)
gdp_q2 <- ggplot(data, aes(reorder(province, -gdp_q2_yoy, sum), gdp_q2_yoy)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "GDP growth in Q2-2020 (%, yoy)", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
gdp_q2
ggsave("gdp_q2.png", width = 9, height = 5)
data %>% mutate(gdp_col = gdp_q2_yoy >= 0) %>%
ggplot(data, aes(reorder(province, -gdp_q2_yoy, sum), gdp_q2_yoy)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "GDP growth in Q2-2020 (%, yoy)", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
data %>% mutate(gdp_col = gdp_q2_yoy >= 0) %>%
ggplot(data, aes(reorder(province, -gdp_q2_yoy, sum), gdp_q2_yoy, fill = gdp_col)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "GDP growth in Q2-2020 (%, yoy)", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
data %>% mutate(gdp_col = gdp_q2_yoy >= 0) %>%
ggplot(data, aes(reorder(province, -gdp_q2_yoy, sum), gdp_q2_yoy, fill = gdp_col)) +
geom_col() + coord_flip()
data %>% mutate(gdp_col = gdp_q2_yoy >= 0) %>%
ggplot(data, aes(reorder(province, -gdp_q2_yoy, sum), gdp_q2_yoy)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "GDP growth in Q2-2020 (%, yoy)", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
data %>%
ggplot(data, aes(reorder(province, -gdp_q2_yoy, sum), gdp_q2_yoy)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "GDP growth in Q2-2020 (%, yoy)", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
a <- data %>% mutate(gdp_col = gdp_q2_yoy >= 0) %>%
ggplot(a, aes(reorder(province, -gdp_q2_yoy, sum), gdp_q2_yoy)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "GDP growth in Q2-2020 (%, yoy)", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
a <- data %>% mutate(gdp_col = gdp_q2_yoy >= 0)
ggplot(a, aes(reorder(province, -gdp_q2_yoy, sum), gdp_q2_yoy)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "GDP growth in Q2-2020 (%, yoy)", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
#ggsave("gdp_q2.png", width = 9, height = 5)
a <- data %>% mutate(gdp_col = gdp_q2_yoy >= 0)
ggplot(a, aes(reorder(province, -gdp_q2_yoy, sum), gdp_q2_yoy, fill = gdp_col)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "GDP growth in Q2-2020 (%, yoy)", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
#ggsave("gdp_q2.png", width = 9, height = 5)
a <- data %>% mutate(gdp_col = ifelse(gdp_q2_yoy < 0, "red", "green")
ggplot(a, aes(reorder(province, -gdp_q2_yoy, sum), gdp_q2_yoy, fill = gdp_col)) +
a <- data %>% mutate(gdp_col = ifelse(gdp_q2_yoy < 0, "red", "green"))
ggplot(a, aes(reorder(province, -gdp_q2_yoy, sum), gdp_q2_yoy, fill = gdp_col)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "GDP growth in Q2-2020 (%, yoy)", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
#ggsave("gdp_q2.png", width = 9, height = 5)
a <- data %>% mutate(gdp_col = ifelse(gdp_q2_yoy < 0, "red", "green"))
ggplot(a, aes(reorder(province, -gdp_q2_yoy, sum), gdp_q2_yoy, fill = gdp_col)) +
geom_col() + coord_flip() +   scale_fill_identity(guide = FALSE) +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "GDP growth in Q2-2020 (%, yoy)", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
#ggsave("gdp_q2.png", width = 9, height = 5)
a <- data %>% mutate(gdp_col = ifelse(gdp_q2_yoy < 0, "red", "green"))
ggplot(a, aes(reorder(province, -gdp_q2_yoy, sum), gdp_q2_yoy, fill = gdp_col)) +
geom_col() + coord_flip() +   scale_fill_identity(guide = FALSE) +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "GDP growth in Q2-2020 (%, yoy)", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
ggsave("gdp_q2.png", width = 9, height = 5)
# Provide correlation matrix
corr <- cor(data[,c(13,15,22,23,25)])
round(corr, 2)
# Provide correlation matrix
corr <- cor(data[,c(13,15,22,23,25)])
round(corr, 2)
# Visualize correlation matrix
corrplot(corr, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
# Visualize correlation matrix
library(corrplot)
corrplot(corr, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
library(Hmisc)
res2<-rcorr(as.matrix(data[,c(13,15,22,23,25)]))
flattenCorrMatrix(res2$r, res2$P)
install.packages("Hmisc")
library(Hmisc)
res2<-rcorr(as.matrix(data[,c(13,15,22,23,25)]))
flattenCorrMatrix(res2$r, res2$P)
install.packages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
res2<-rcorr(as.matrix(data[,c(13,15,22,23,25)]))
flattenCorrMatrix(res2$r, res2$P)
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
library(Hmisc)
res2<-rcorr(as.matrix(data[,c(13,15,22,23,25)]))
flattenCorrMatrix(res2$r, res2$P)
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
library(Hmisc)
res2<-rcorr(as.matrix(data[,c(15,22,23,25)]))
flattenCorrMatrix(res2$r, res2$P)
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
mobility <- ggplot(data, aes(reorder(province, -mob_all, sum), mob_all)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Change in number of cases (in 100.000 population)", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
case_rate
ggsave("case_change.png", width = 9, height = 5)
case_rate <- ggplot(data, aes(reorder(province, -rate_chg, sum), rate_chg)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Change in number of cases (in 100.000 population)", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
case_rate
ggsave("case_change.png", width = 9, height = 5)
mobility <- ggplot(data, aes(reorder(province, -mob_all, sum), mob_all)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Change in number of cases (in 100.000 population)", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
mobility
ggsave("mobility.png", width = 9, height = 5)
mobility <- ggplot(data, aes(reorder(province, -mob_all, sum), mob_all)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Change in people mobility relative to baseline", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
mobility
ggsave("mobility.png", width = 9, height = 5)
job_loss <- ggplot(data, aes(reorder(province, -job_loss, sum), job_loss)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Number of people who loss their job", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
job_loss
ggsave("job_loss.png", width = 9, height = 5)
# Provide correlation matrix
corr <- cor(data[,c(13,15,22,23,25)])
round(corr, 2)
library(Hmisc)
res2<-rcorr(as.matrix(data[,c(15,22,23,25)]))
flattenCorrMatrix(res2$r, res2$P)
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
corr_df <- data %>%
select([,c(13,15,22,23,25)])
corr_df <- data %>%
select(,c(13,15,22,23,25))
corr_df <- select(data,[c(13,15,22,23,25)])
corr_df <- select(data,[,c(13,15,22,23,25)])
corr_df <- select(data,[,c(13,15,22,23,25)])
corr_df <- select(data[,c(13,15,22,23,25)])
corr_df <- select(data[,c(13,15,22,23,25)])
library(tidyr)
corr_df <- select(data[,c(13,15,22,23,25)])
select(data[,c(13,15,22,23,25)])
corr_df <- subset(data, select = c(13, 15, 22, 23, 25))
View(corr)
df1 <- subset(data, select = c(13, 15, 22, 23, 25))
View(df_definitions)
View(df1)
df1 <- subset(data, select = c(2, 13, 15, 22, 23, 25))
df1 <- subset(data, select = c(2, 13, 15, 22, 23, 25)) %>%
colnames("Province", "Case change", "Job loss", "People mobility", "TAS share in GDP", "GDPg Q2-2020")
df1 <- subset(data, select = c(2, 13, 15, 22, 23, 25))
colnames(df1) <- c("Province", "Case change", "Job loss", "People mobility", "TAS share in GDP", "GDPg Q2-2020")
# Provide correlation matrix
corr <- cor(df1)
# Provide correlation matrix
corr <- cor(df1[,c(2:6)])
round(corr, 2)
library(Hmisc)
res2<-rcorr(as.matrix(df1[,c(2:6)]))
flattenCorrMatrix(res2$r, res2$P)
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
ggsave("coor.png"")
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
ggsave("coor.png")
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
dev.copy(jpeg,filename="corr.png");
dev.off ();
# Provide correlation matrix
corr <- cor(df1[,c(3:6)])
round(corr, 2)
library(Hmisc)
res2<-rcorr(as.matrix(df1[,c(3:6)]))
flattenCorrMatrix(res2$r, res2$P)
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
dev.copy(jpeg,filename="corr.png");
dev.off ();
