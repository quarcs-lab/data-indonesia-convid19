data_w <- dcast(mydata, Time ~ Province, value.var = "GRDP")
data_w
mydatats <- ts(data_w[,2:35], start =c(2010,1), frequency = 4)
mydatats
str(mydatats)
View(mydatats)
lngdp <- 100*log(mydatats)
View(lngdp)
par(mfrow=c(1,2))
plot(mydatats[,1], xlab="", ylab="", main="Aceh GDP level")
plot(lngdp[,1], xlab="", ylab="", main="Aceh GDP logs")
par(mfrow=c(1,1))
library(dygraphs)
dygraph(lngdp[,1]) %>%
dyRangeSelector()
year = rep(2010:2019, each =4)
year
quarter = rep(c("q1", "q2", "q3", "q4"), 10)
quarter
time <- paste(year, quarter, sep = "_")
time
hp <- data.frame(time)
hp <- rbind(hp, c("2020_q1")) %>%
rbind(c("2020_q2"))
hp
lngdp1 <- data.frame(hp, lngdp)
hp1 <- data.frame(data_w$Time)
hp1
time1 <- data.frame(time=lngdp1[,1])
time1
for (i in 2:35) {
hpfil <- hpfilter(lngdp1[,i], freq = 1600)
actual <- hpfil[["x"]]
trendHP <- hpfil[["trend"]]
cycleHP <- actual - trendHP
colnames(actual) <- c(paste(colnames(lngdp1)[i],"actual",sep = "_"))
colnames(trendHP) <- c(paste(colnames(lngdp1)[i],"trendHP",sep = "_"))
colnames(cycleHP) <- c(paste(colnames(lngdp1)[i],"cycleHP",sep = "_"))
actual_trend_cycle <- data.frame(actual, trendHP, cycleHP, time1)
hp <- left_join(hp, actual_trend_cycle, by = "time")
}
View(hp)
write.table(hp, "outputgap.csv", sep = ";", col.names = NA,
qmethod = "double")
for (i in 2:36) {
hpfil <- hpfilter(lngdp1[,i], freq = 1600)
actual <- hpfil[["x"]]
trendHP <- hpfil[["trend"]]
cycleHP <- actual - trendHP
colnames(actual) <- c(paste(colnames(lngdp1)[i],"actual",sep = "_"))
colnames(trendHP) <- c(paste(colnames(lngdp1)[i],"trendHP",sep = "_"))
colnames(cycleHP) <- c(paste(colnames(lngdp1)[i],"cycleHP",sep = "_"))
actual_trend_cycle <- data.frame(actual, trendHP, cycleHP, time1)
hp <- left_join(hp, actual_trend_cycle, by = "time")
}
library(mFilter)
library(dplyr)
library(ggplot2)
library(dygraphs)
library(xts)
library(readxl)
library(quantmod)
library(neverhpfilter)
library(readxl)
mydata <- read_excel("Output gap_quarterly.xlsx")
mydata
hp <- data.frame(time)
hp <- rbind(hp, c("2020_q1")) %>%
rbind(c("2020_q2"))
hp
lngdp1 <- data.frame(hp, lngdp)
View(lngdp1)
View(lngdp)
mydatats <- ts(data_w[,2:36], start =c(2010,1), frequency = 4)
mydatats
lngdp <- 100*log(mydatats)
View(lngdp)
par(mfrow=c(1,2))
plot(mydatats[,1], xlab="", ylab="", main="Aceh GDP level")
plot(lngdp[,1], xlab="", ylab="", main="Aceh GDP logs")
par(mfrow=c(1,1))
year = rep(2010:2019, each =4)
year
quarter = rep(c("q1", "q2", "q3", "q4"), 10)
quarter
time <- paste(year, quarter, sep = "_")
time
hp <- data.frame(time)
hp <- rbind(hp, c("2020_q1")) %>%
rbind(c("2020_q2"))
hp
lngdp1 <- data.frame(hp, lngdp)
time1 <- data.frame(time=lngdp1[,1])
time1
for (i in 2:36) {
hpfil <- hpfilter(lngdp1[,i], freq = 1600)
actual <- hpfil[["x"]]
trendHP <- hpfil[["trend"]]
cycleHP <- actual - trendHP
colnames(actual) <- c(paste(colnames(lngdp1)[i],"actual",sep = "_"))
colnames(trendHP) <- c(paste(colnames(lngdp1)[i],"trendHP",sep = "_"))
colnames(cycleHP) <- c(paste(colnames(lngdp1)[i],"cycleHP",sep = "_"))
actual_trend_cycle <- data.frame(actual, trendHP, cycleHP, time1)
hp <- left_join(hp, actual_trend_cycle, by = "time")
}
View(hp)
write.table(hp, "outputgap.csv", sep = ";", col.names = NA,
qmethod = "double")
hpcycle <- select(hp, -contains("actual")) %>%
select(-contains("trendHP"))
long_hp <- pivot_longer(hpcycle, -c(time), values_to = "output_gap", names_to = "province" )
long_hp <- long_hp %>% mutate(province = as.character(gsub("_cycleHP", "", province)))
graph <- long_hp %>%
ggplot(aes(x = time, y = output_gap, color= province)) +
geom_line(size=0.5) +
labs(subtitle = "Output Gap, 2012-2019",
x = "Time",
y = "Output gap", color="") + theme_bw() +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
graph
q2_2020hp <- filter(long_hp, time == "2020_q2")
outputgap <- ggplot(q2_2020hp, aes(reorder(province, -output_gap, sum), output_gap)) +
geom_col() + coord_flip() +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Provincial output gap in Q2-2020 (%)", color="grey") +
theme(text=element_text( family="Palatino")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
outputgap
ggsave("outputgap.png", width = 9, height = 5)
ggplot(q2_2020hp,
aes(x = reorder(province, output_gap),
y = output_gap,
fill = ifelse(province == "Indonesia", "Highlighted", "Normal") )) +
geom_bar(stat = "identity") +
## drop legend and Y-axis title
theme(legend.position = "none", axis.title.y = element_blank()) +
coord_flip(expand = FALSE) ########## SMALL UPDATE
ggplot(q2_2020hp,
aes(x = reorder(province, output_gap),
y = output_gap,
fill = ifelse(province == "Indonesia", "Highlighted", "Normal") )) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Provincial output gap in Q2-2020 (%)", color="grey") +
theme(text=element_text( family="Palatino")) +
## drop legend and Y-axis title
theme(legend.position = "none", axis.title.y = element_blank()) +
coord_flip(expand = FALSE) ########## SMALL UPDATE
ggplot(q2_2020hp,
aes(x = reorder(province, output_gap),
y = output_gap,
fill = ifelse(province == "Indonesia", "Highlighted", "grey") )) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Provincial output gap in Q2-2020 (%)", color="grey") +
theme(text=element_text( family="Palatino")) +
## drop legend and Y-axis title
theme(legend.position = "none", axis.title.y = element_blank()) +
coord_flip(expand = FALSE) ########## SMALL UPDATE
outputgap <- ggplot(q2_2020hp,
aes(x = reorder(province, output_gap),
y = output_gap,
fill = ifelse(province == "Indonesia", "Highlighted", "grey") )) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Provincial output gap in Q2-2020 (%)", color="grey") +
theme(text=element_text( family="Palatino")) +
## drop legend and Y-axis title
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8)) +
coord_flip(expand = FALSE) ########## SMALL UPDATE
outputgap
ggsave("outputgap.png", width = 9, height = 5)
outputgap <- ggplot(q2_2020hp,
aes(x = reorder(province, output_gap),
y = output_gap,
fill = ifelse(province == "Indonesia", "Highlighted", "grey") )) +
geom_bar(stat = "identity") +  coord_flip(expand = FALSE) +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Provincial output gap in Q2-2020 (%)", color="grey") +
theme(text=element_text( family="Palatino")) +
## drop legend and Y-axis title
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
outputgap
ggsave("outputgap.png", width = 9, height = 5)
outputgap <- ggplot(q2_2020hp,
aes(x = reorder(province, output_gap),
y = output_gap,
fill = ifelse(province == "Indonesia", "Highlighted", "grey") )) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Provincial output gap in Q2-2020 (%)", color="grey") +
theme(text=element_text( family="Palatino")) +
## drop legend and Y-axis title
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
guides(col = guide_legend(nrow = 8))
outputgap
ggsave("outputgap.png", width = 9, height = 5)
ggplot(q2_2020hp,
aes(x = reorder(province, output_gap),
y = output_gap,
fill = ifelse(province == "Indonesia", "Highlighted", "grey") )) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Provincial output gap in Q2-2020 (%)", color="grey") +
theme(text=element_text( family="Palatino")) +
## drop legend and Y-axis title
theme(legend.position = "none", axis.title.y = element_blank()) +
coord_flip(expand = FALSE) ########## SMALL UPDATE
outputgap <- ggplot(q2_2020hp,
aes(x = reorder(province, output_gap),
y = output_gap,
fill = ifelse(province == "Indonesia", "Highlighted", "grey") )) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Provincial output gap in Q2-2020 (%)", color="grey") +
theme(text=element_text( family="Palatino")) +
## drop legend and Y-axis title
theme(legend.position = "none", axis.title.y = element_blank()) +
coord_flip(expand = FALSE) ########## SMALL UPDATE
outputgap
ggsave("outputgap.png", width = 9, height = 5)
outputgap <- ggplot(q2_2020hp,
aes(x = reorder(province, output_gap),
y = output_gap,
fill = ifelse(province == "Indonesia", "Highlighted", "grey") )) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Provincial output gap in Q2-2020 (%)", color="grey") +
theme(text=element_text( family="Palatino")) +
## drop legend and Y-axis title
theme(legend.position = "none", axis.title.y = element_blank()) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank() +
coord_flip(expand = FALSE) ########## SMALL UPDATE
outputgap
outputgap <- ggplot(q2_2020hp,
aes(x = reorder(province, output_gap),
y = output_gap,
fill = ifelse(province == "Indonesia", "Highlighted", "grey") )) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Provincial output gap in Q2-2020 (%)", color="grey") +
theme(text=element_text( family="Palatino")) +
## drop legend and Y-axis title
theme(legend.position = "none", axis.title.y = element_blank()) +
coord_flip(expand = FALSE) ########## SMALL UPDATE
outputgap
ggsave("outputgap.png", width = 9, height = 5)
outputgap <- ggplot(q2_2020hp,
aes(x = reorder(province, output_gap),
y = output_gap,
fill = ifelse(province == "Indonesia", "Highlighted", "grey") )) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Provincial output gap in Q2-2020 (%)", color="grey") +
theme(text=element_text( family="Palatino")) +
## drop legend and Y-axis title
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "none", axis.title.y = element_blank()) +
coord_flip(expand = FALSE) ########## SMALL UPDATE
outputgap
ggsave("outputgap.png", width = 9, height = 5)
outputgap <- ggplot(q2_2020hp,
aes(x = reorder(province, output_gap),
y = output_gap,
fill = ifelse(province == "Indonesia", "Highlighted", "grey") )) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Provincial output gap in Q2-2020 (%)") +
theme(text=element_text( family="Palatino")) +
## drop legend and Y-axis title
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "none", axis.title.y = element_blank()) +
coord_flip(expand = FALSE) ########## SMALL UPDATE
outputgap
ggsave("outputgap.png", width = 9, height = 5)
outputgap <- ggplot(q2_2020hp,
aes(x = reorder(province, -output_gap),
y = output_gap,
fill = ifelse(province == "Indonesia", "Highlighted", "grey") )) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Provincial output gap in Q2-2020 (%)") +
theme(text=element_text( family="Palatino")) +
## drop legend and Y-axis title
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "none", axis.title.y = element_blank()) +
coord_flip(expand = FALSE) ########## SMALL UPDATE
outputgap
ggsave("outputgap.png", width = 9, height = 5)
outputgap <- ggplot(q2_2020hp,
aes(x = reorder(province, -output_gap),
y = output_gap,
fill = ifelse(province == "Indonesia", "Highlighted", "red") )) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(subtitle = "",
x = "Province",
y = "Provincial output gap in Q2-2020 (%)") +
theme(text=element_text( family="Palatino")) +
## drop legend and Y-axis title
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "none", axis.title.y = element_blank()) +
coord_flip(expand = FALSE) ########## SMALL UPDATE
outputgap
ggsave("outputgap.png", width = 9, height = 5)
outputgap <- ggplot(q2_2020hp,
aes(x = reorder(province, -output_gap),
y = output_gap,
fill = ifelse(province == "Indonesia", "Highlighted", "red") )) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(subtitle = "",
x = "",
y = "Output gap in Q2-2020 (%)") +
theme(text=element_text( family="Palatino")) +
## drop legend and Y-axis title
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "none", axis.title.y = element_blank()) +
coord_flip(expand = FALSE) ########## SMALL UPDATE
outputgap
ggsave("outputgap.png", width = 9, height = 5)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
library(tidyverse)  # Modern data science workflow
library(sf)         # Simple features for R
library(tmap)       # Thematic Maps
library(tmaptools)  # Thematic Maps Tools
library(RColorBrewer) # ColorBrewer Palettes
library(leaflet)    # Interactive web maps
library(rgdal)      # Bindings for the Geospatial Data Abstraction Library
library(rgeos)      # Interface to Geometry Engine - Open Source
# Change the presentation of decimal numbers to 4 and avoid scientific notation
options(prompt="R> ", digits=4, scipen=999)
library(readxl)
data <- read_excel("explore expandr.xlsx",
sheet = "Sheet1")
library(readxl)
data <- read_excel("explore expandr.xlsx",
sheet = "Sheet1")
library(readxl)
data <- read_excel("explore_expandr.xlsx",
sheet = "Sheet1")
View(data)
df <- data %>% select(-c(4:7,9:12))
df1 <- subset(data, select = c(2, 13, 15, 22, 23, 25))
colnames(df1) <- c("Province", "Case change", "Job loss", "People mobility", "TAS share in GDP", "GDPg Q2-2020")
View(df1)
df1 <- subset(data, select = c(2, 13, 15, 22, 23, 25))
colnames(df1) <- c("Province", "Case change", "Job loss", "People's mobility", "TAS share in GDP", "GDPg Q2-2020")
df1 <- subset(data, select = c(2, 13, 15, 22, 23, 25))
colnames(df1) <- c("Province", "Case change", "Jobs lost", "People's mobility", "TAS share in GDP", "GDPg Q2-2020")
# Provide correlation matrix
corr <- cor(df1[,c(2:6)])
round(corr, 2)
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
library(Hmisc)
res2<-rcorr(as.matrix(df1[,c(2:6)]))
flattenCorrMatrix(res2$r, res2$P)
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(jpeg,filename="corr.png");
dev.off ();
corrplot(res2$r, type="lower", order="hclust",
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust",
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(jpeg,filename="corr.png");
#dev.off ();
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust",
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(jpeg,filename="corr.png");
dev.off ();
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower",
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(jpeg,filename="corr.png");
dev.off ();
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust",
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(jpeg,filename="corr.png");
dev.off ();
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust", tl.col="black", tl.srt=45,
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(jpeg,filename="corr.png");
dev.off ();
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust", tl.col="black", tl.srt=90,
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(jpeg,filename="corr.png");
dev.off ();
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust", tl.col="black", tl.srt=0,
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(jpeg,filename="corr.png");
dev.off ();
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust", tl.col="black", tl.srt=20,
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(jpeg,filename="corr.png");
dev.off ();
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust", tl.col="black", tl.srt=25,
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(jpeg,filename="corr.png");
dev.off ();
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust", tl.col="black", tl.srt=25,
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(png,filename="corr.png");
dev.off ();
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust", tl.col="black", tl.srt=25,
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(png,filename="corr.png");
dev.off ();
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust", tl.col="black", tl.srt=25,
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(png,filename="corr.png");
dev.off()
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust", tl.col="black", tl.srt=25,
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(png,filename="corr.png", width = 800, height = 600);
dev.off()
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust", tl.col="black", tl.srt=25,
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(png,filename="corr.png", width = 800, height = 200);
dev.off()
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust", tl.col="black", tl.srt=25,
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(png,filename="corr.png", width = 800, height = 500);
dev.off()
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust", tl.col="black", tl.srt=25,
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(png,filename="corr.png", width = 800, height = 600);
dev.off()
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust", tl.col="black", tl.srt=25,
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(png,filename="corr.png", width = 800, height = 400);
dev.off()
# Visualize correlation matrix
library(corrplot)
corrplot(res2$r, type="lower", order="hclust", tl.col="black", tl.srt=25,
p.mat = res2$P, sig.level = 0.05, insig = "label_sig")
dev.copy(png,filename="corr.png", width = 800, height = 500);
dev.off()
